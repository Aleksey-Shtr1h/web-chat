{"version":3,"sources":["components/header/header.jsx","redux/data/dataAction.js","adapter/comment.js","redux/data/dataReducer.js","components/comments-list/comments-list.jsx","components/form-new-comment/form-new-comment.jsx","components/preload/preload.jsx","components/main-page/main-page.jsx","components/app/App.js","redux/rootRaducer.js","redux/nameSpace.js","index.js","utils/firebase.js"],"names":["Header","children","className","ActionTypeData","ActionCreatorData","commets","type","payload","comment","adapterComment","commentsApi","map","commentApi","id","commentData","date","Date","description","nameUser","name","initialState","comments","OperationData","dispatch","getState","api","firebase","firestore","collection","onSnapshot","snapshot","usersCommets","docs","newUsersComments","userCommet","data","dateNow","add","Math","random","toISOString","commentId","refComments","doc","delete","CommentsList","useSelector","state","DATA","useDispatch","sort","prev","next","commentChat","key","onClick","FormNewComment","props","action","method","disabled","onSubmit","evt","preventDefault","value","onChange","target","required","Preload","Fragment","MainPage","length","App","useEffect","useComments","rootReducer","combineReducers","Object","assign","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","querySelector","init"],"mappings":"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","file":"static/js/main.39b18a23.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Header = ({children}) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"title-site\">Web-Chat</h1>\r\n      {children}\r\n    </div>\r\n  )\r\n};\r\n","export const ActionTypeData = {\r\n  GET_COMMENTAS: `GET_COMMENTAS`,\r\n  CHANGE_COMMENT_PLACE: `CHANGE_COMMENT_PLACE`,\r\n  ERASE_COMMENT_FORM: `ERASE_COMMENT_FORM`,\r\n};\r\n\r\nexport const ActionCreatorData = {\r\n  getComments: (commets) => {\r\n    return {\r\n      type: ActionTypeData.GET_COMMENTAS,\r\n      payload: commets,\r\n    };\r\n  },\r\n\r\n  actionChangeCommentPlace: (comment) => ({\r\n    type: ActionTypeData.CHANGE_COMMENT_PLACE,\r\n    payload: comment,\r\n  }),\r\n\r\n  actionEraseCommentForm: () => ({\r\n    type: ActionTypeData.ERASE_COMMENT_FORM,\r\n    payload: ``,\r\n  }),\r\n};","const changeComment = (commentData) => {\r\n  return {\r\n    id: commentData.id,\r\n    date: new Date(commentData.date),\r\n    description: commentData.description,\r\n    nameUser: commentData.name,\r\n  };\r\n};\r\n\r\nexport const adapterComment = (commentsApi) => {\r\n  return commentsApi.map((commentApi) => changeComment(commentApi));\r\n};","import {ActionCreatorData, ActionTypeData} from './dataAction.js';\r\nimport firebase from 'firebase';\r\n\r\nimport {adapterComment} from '../../adapter/comment.js';\r\n\r\nconst randomNumber = () => {\r\n  return Math.random();\r\n}\r\n\r\nexport const initialState = {\r\n  comments: [],\r\n  comment: ``,\r\n};\r\n\r\nexport const OperationData = {\r\n\r\n  loadComments: () => (dispatch, getState, api) => {\r\n    const dataBase = firebase.firestore();\r\n    dataBase.collection(`comments`)\r\n    .onSnapshot((snapshot) => {\r\n      const usersCommets = snapshot.docs;\r\n      const newUsersComments = adapterComment(\r\n      usersCommets.map((userCommet) => ({\r\n        ...userCommet.data(),\r\n      })));\r\n\r\n      dispatch(ActionCreatorData.getComments(newUsersComments));\r\n    })\r\n  },\r\n\r\n  postComments: (description) => (dispatch, getState, api) => {\r\n    const dateNow = new Date();\r\n\r\n    const dataBase = firebase.firestore()\r\n    const refComments = dataBase.collection(`comments`);\r\n\r\n    refComments.add({\r\n      description,\r\n      id: randomNumber(),\r\n      name: 'Alex',\r\n      date: dateNow.toISOString(),\r\n    });\r\n\r\n    dispatch(ActionCreatorData.actionEraseCommentForm());\r\n  },\r\n\r\n  deletePost: (commentId) => (dispatch, getState, api) => {\r\n    const dataBase = firebase.firestore()\r\n    const refComments = dataBase.collection(`comments`);\r\n\r\n    refComments.onSnapshot((snapshot) => {\r\n      const usersCommets = snapshot.docs;\r\n      usersCommets.map((userCommet) => {\r\n        if (commentId === userCommet.data().id) {\r\n          refComments.doc(userCommet.id).delete();\r\n        }\r\n      });\r\n    })\r\n  }\r\n};\r\n\r\nexport const dataReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n\r\n    case ActionTypeData.GET_COMMENTAS:\r\n      return Object.assign({}, state, {\r\n        comments: action.payload,\r\n      });\r\n\r\n    case ActionTypeData.CHANGE_COMMENT_PLACE:\r\n      return Object.assign({}, state, {\r\n        comment: action.payload,\r\n      });\r\n\r\n    case ActionTypeData.ERASE_COMMENT_FORM:\r\n      return Object.assign({}, state, {\r\n        comment: action.payload,\r\n      });\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return state;\r\n};","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport {OperationData} from '../../redux/data/dataReducer.js';\r\n\r\nexport const CommentsList = () => {\r\n  const comments = useSelector((state) => state.DATA.comments);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <ul className=\"comments__list\">\r\n      {comments\r\n        .sort((prev, next) => prev.date - next.date)\r\n        .map((commentChat, id) => {\r\n        return (\r\n          <li \r\n            className=\"comments__item\"\r\n\r\n            key={commentChat.description + id}\r\n          > \r\n            <p className=\"comments__text\">{commentChat.description}</p>\r\n            <button\r\n              className=\"comments__btn-close\"\r\n              onClick={() => {\r\n                dispatch(OperationData.deletePost(commentChat.id))\r\n              }}\r\n            />\r\n          </li>\r\n        )\r\n      })}\r\n    </ul>\r\n  )\r\n};","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport {ActionCreatorData} from '../../redux/data/dataAction.js';\r\nimport {OperationData} from '../../redux/data/dataReducer.js';\r\n\r\nexport const FormNewComment = props => {\r\n  const comment = useSelector((state) => state.DATA.comment);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <form \r\n      className=\"comments__form\"\r\n      action=\"#\"\r\n      method=\"post\"\r\n      disabled=\"disabled\"\r\n      onSubmit={(evt) => {\r\n        evt.preventDefault();\r\n        dispatch(OperationData.postComments(comment))\r\n      }}\r\n    >\r\n\r\n      <textarea\r\n        className=\"comments__textarea\"\r\n        id=\"review\"\r\n        name=\"review\"\r\n        value={comment}\r\n        onChange={(evt) => {\r\n          dispatch(ActionCreatorData.actionChangeCommentPlace(evt.target.value));\r\n        }}\r\n        required\r\n    >\r\n    </textarea>\r\n\r\n    <button\r\n      className=\"comments__submit\"\r\n      type=\"submit\"\r\n    >\r\n      Отправить\r\n    </button>\r\n\r\n    </form>\r\n  )\r\n};","import React from 'react';\r\n\r\nimport './preload.css';\r\n\r\nexport const Preload = () => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <div className=\"loading-network\">\r\n        <h1 className=\"loading-network__title\">Загрузка...</h1>\r\n      </div>\r\n\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\n\r\nimport {CommentsList} from '../comments-list/comments-list.jsx';\r\nimport {FormNewComment} from '../form-new-comment/form-new-comment.jsx';\r\nimport {Preload} from '../preload/preload.jsx';\r\n\r\nexport const MainPage = () => {\r\n  const comments = useSelector((state) => state.DATA.comments);\r\n\r\n  return (\r\n    <main className=\"main\">\r\n      {comments.length !== 0 ?\r\n        <React.Fragment>\r\n          <CommentsList /> \r\n          <FormNewComment />\r\n        </React.Fragment>\r\n\r\n        : \r\n\r\n        <Preload />\r\n      }\r\n    </main>\r\n  )\r\n};","import React, {useEffect} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport './App.css';\r\n\r\nimport {Header} from '../header/header.jsx';\r\nimport {MainPage} from '../main-page/main-page.jsx';\r\n\r\nimport {OperationData} from '../../redux/data/dataReducer.js';\r\n\r\nconst useComments = () => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(OperationData.loadComments());\r\n  }, []);\r\n};\r\n\r\nexport const App = ()  => {\r\n  useComments();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header> \r\n        <MainPage />\r\n      </Header>\r\n\r\n    </div>\r\n  );\r\n};","import {combineReducers} from 'redux';\r\nimport {dataReducer} from './data/dataReducer.js';\r\nimport {NameSpace} from \"./nameSpace.js\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  [NameSpace.DATA]: dataReducer,\r\n});","export const NameSpace = {\r\n  DATA: `DATA`,\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {initialFirebase} from './utils/firebase.js';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport './index.css';\r\n\r\nimport {App} from './components/app/App.js';\r\n\r\nimport {rootReducer} from './redux/rootRaducer.js';\r\n\r\nconst init = () => {\r\n  initialFirebase();\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk)\r\n  );\r\n\r\n  ReactDOM.render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n    document.querySelector(`#root`)\r\n  );\r\n};\r\n\r\ninit();\r\n","import firebase from 'firebase';\r\n\r\nexport const initialFirebase = () => {\r\n  const firebaseConfig = {\r\n      apiKey: \"AIzaSyB-Qj5y11gismV4eZbaubJL9B1CDTFI9-s\",\r\n      authDomain: \"web-chat-1b38f.firebaseapp.com\",\r\n      databaseURL: \"https://web-chat-1b38f.firebaseio.com\",\r\n      projectId: \"web-chat-1b38f\",\r\n      storageBucket: \"web-chat-1b38f.appspot.com\",\r\n      messagingSenderId: \"340398160492\",\r\n      appId: \"1:340398160492:web:62abd80b5f0a424c787649\"\r\n    };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n}"],"sourceRoot":""}